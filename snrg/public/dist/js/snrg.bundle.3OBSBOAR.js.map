{
  "version": 3,
  "sources": ["../../../../../apps/snrg/snrg/public/js/quick_entry.js", "../../../../../apps/snrg/snrg/public/js/secondary_customer.js", "../../../../../apps/snrg/snrg/public/js/lead.js"],
  "sourcesContent": ["frappe.provide('frappe.ui.form');\n\nclass GSTQuickEntryForm extends frappe.ui.form.QuickEntryForm {\n    constructor(...args) {\n                super(...args);\n                this.skip_redirect_on_error = true;\n                this.api_enabled =\n                    india_compliance.is_api_enabled() && gst_settings.autofill_party_info;\n            }\n        \n    async setup() {\n        await frappe.model.with_doctype(\"Address\");\n        super.setup();\n    }\n\n    render_dialog() {\n        super.render_dialog();\n        india_compliance.set_state_options(this.dialog);\n    }\n\n    get_address_fields() {\n        return [\n            {\n                label: __(\"Primary Address Details\"),\n                fieldname: \"primary_address_section\",\n                fieldtype: \"Section Break\",\n                description: this.api_enabled\n                    ? __(\n                            `When you enter a GSTIN, the permanent address linked to it is\n                        autofilled.<br>\n                        Change the {0} to autofill other addresses.`,\n                            [frappe.meta.get_label(\"Address\", \"pincode\")]\n                        )\n                    : \"\",\n                collapsible: 0,\n            },\n            {\n                // set as _pincode so that frappe.ui.form.Layout doesn't override it\n                fieldname: \"_pincode\",\n                fieldtype: \"Autocomplete\",\n                ignore_validation: true,\n            },\n            {\n                fieldname: \"address_line1\",\n                fieldtype: \"Data\",\n            },\n            {\n                fieldname: \"address_line2\",\n                fieldtype: \"Data\",\n            },\n            {\n                fieldtype: \"Column Break\",\n            },\n            {\n                fieldname: \"city\",\n                fieldtype: \"Data\",\n            },\n            {\n                fieldname: \"state\",\n                fieldtype: \"Autocomplete\",\n                ignore_validation: true,\n            },\n            {\n                fieldname: \"country\",\n                fieldtype: \"Link\",\n                options: \"Country\",\n                default: frappe.defaults.get_user_default(\"country\"),\n                onchange: () => {\n                    india_compliance.set_state_options(this.dialog);\n                },\n            },\n        ];\n    }\n\n    get_gstin_field() {\n        return [\n            {\n                ...frappe.meta.get_docfield(this.doctype, \"custom_gstin\"),\n                label: \"GSTIN\",\n                fieldname: \"_custom_gstin\",\n                fieldtype: \"Autocomplete\",\n                description: this.api_enabled ? get_gstin_description() : \"\",\n                ignore_validation: true,\n                onchange: () => {\n                    const d = this.dialog;\n                    if (this.api_enabled && !gst_settings.sandbox_mode)\n                        return autofill_fields(d);\n                },\n            },\n        ];\n    }\n\n    update_doc() {\n        const doc = super.update_doc();\n        doc.pincode = doc._pincode;\n        doc.custom_gstin = doc._custom_gstin;\n        doc.address_line1 = doc.address_line1;\n        return doc;\n    }\n        \n}\n\nclass LeadQuickEntryForm extends GSTQuickEntryForm{\n    get_address_fields() {\n                const fields = super.get_address_fields();\n        \n                for (const field of fields) {\n                    const fieldname =\n                        field.fieldname === \"_pincode\" ? \"pincode\" : field.fieldname;\n        \n                    if (!field.label && fieldname) {\n                        field.label = frappe.meta.get_label(\"Address\", fieldname);\n                    }\n                }\n        \n                return fields;\n            }\n            get_mandatory_fields() {\n                var fields = [{\n                    label: __(\"First Name\"),\n                    fieldname: \"first_name\",\n                    fieldtype: \"Data\",\n                    reqd: 1,\n                },\n                {\n                    label: __(\"Organisation Name\"),\n                    fieldname: \"company_name\",\n                    fieldtype: \"Data\",\n                },\n                {\n                    label: __(\"Source\"),\n                    fieldname: \"source\",\n                    fieldtype: \"Link\",\n                    option: \"Lead Source\",\n                }\n\n            ]\n        \n                return fields;\n    }\n        \n            render_dialog() {\n                this.mandatory = [\n                    ...this.get_gstin_field(),\n                    ...this.mandatory = this.get_mandatory_fields(),\n                    ...this.get_contact_fields(),\n                    ...this.get_address_fields(),\n                ];\n        \n                super.render_dialog();\n            }\n        \n            get_contact_fields() {\n                return [\n                    {\n                        label: __(\"Primary Contact Details\"),\n                        fieldname: \"primary_contact_section\",\n                        fieldtype: \"Section Break\",\n                        collapsible: 0,\n                    },\n                    {\n                        label: __(\"Email ID\"),\n                        fieldname: \"_email_id\",\n                        fieldtype: \"Data\",\n                        options: \"Email\",\n                    },\n                    {\n                        fieldtype: \"Column Break\",\n                    },\n                    {\n                        label: __(\"Mobile Number\"),\n                        fieldname: \"_mobile_no\",\n                        fieldtype: \"Data\",\n                    },\n                ];\n            }\n        \n            update_doc() {\n                const doc = super.update_doc();\n                // to prevent clash with ERPNext\n                doc._address_line1 = doc.address_line1;\n                // delete doc.address_line1;\n                // these fields were suffixed with _ to prevent them from being read only\n                doc.email_id = doc._email_id;\n                doc.mobile_no = doc._mobile_no;\n        \n                return doc;\n            }\n        \n}\n\n\n\nfrappe.ui.form.LeadQuickEntryForm = LeadQuickEntryForm;\n\n\nasync function autofill_fields(dialog) {\n    const gstin = dialog.doc._custom_gstin;\n    const gstin_field = dialog.get_field(\"_custom_gstin\");\n\n    if (!gstin || gstin.length !== 15) {\n        const pincode_field = dialog.fields_dict._pincode;\n        pincode_field.set_data([]);\n        pincode_field.df.onchange = null;\n\n        gstin_field.set_description(get_gstin_description());\n        return;\n    }\n\n    const gstin_info = await get_gstin_info(gstin);\n    set_gstin_description(gstin_field, gstin_info.status);\n    map_gstin_info(dialog.doc, gstin_info);\n    dialog.set_value('company_name', gstin_info.business_name)\n    dialog.refresh();\n\n    setup_pincode_field(dialog, gstin_info);\n}\n\nfunction set_gstin_description(gstin_field, status) {\n    if (!status) {\n        gstin_field.set_description(\"\");\n        return;\n    }\n\n    gstin_field.set_description(india_compliance.get_gstin_status_desc(status));\n}\n\nfunction setup_pincode_field(dialog, gstin_info) {\n    if (!gstin_info.all_addresses) return;\n\n    const pincode_field = dialog.fields_dict._pincode;\n    pincode_field.set_data(\n        gstin_info.all_addresses.map(address => {\n            return {\n                label: address.pincode,\n                value: address.pincode,\n                description: `${address.address_line1}, ${address.address_line2}, ${address.city}, ${address.state}`,\n            };\n        })\n    );\n    pincode_field.df.onchange = () => {\n        autofill_address(dialog.doc, gstin_info);\n        dialog.refresh();\n    };\n}\n\nfunction get_gstin_info(gstin, throw_error = true) {\n    return frappe\n        .call({\n            method: \"india_compliance.gst_india.utils.gstin_info.get_gstin_info\",\n            args: { gstin, throw_error }\n        })\n        .then(r => r.message);\n}\n\nfunction map_gstin_info(doc, gstin_info) {\n    if (!gstin_info) return;\n\n    update_lead_info(doc, gstin_info);\n\n    if (gstin_info.permanent_address) {\n        update_address_info(doc, gstin_info.permanent_address);\n    }\n}\n\nfunction update_lead_info(doc, gstin_info) {\n    doc.gstin = doc._custom_gstin;\n    doc.gst_category = gstin_info.gst_category;\n\n    if (!in_list(frappe.boot.gst_party_types, doc.doctype)) return;\n\n    const lead_name_field = `${doc.doctype.toLowerCase()}_name`;\n    doc[lead_name_field] = gstin_info.business_name;\n}\n\nfunction update_address_info(doc, address) {\n    if (!address) return;\n\n    Object.assign(doc, address);\n    // set field renamed due conflict with frappe.ui.form.Layout\n    doc._pincode = address.pincode;\n}\n\nfunction autofill_address(doc, { all_addresses }) {\n    const { _pincode: pincode } = doc;\n    if (!pincode || pincode.length !== 6 || !all_addresses) return;\n\n    update_address_info(\n        doc,\n        all_addresses.find(address => address.pincode == pincode)\n    );\n}\n\nfunction get_gstin_description() {\n    if (!gst_settings.sandbox_mode) {\n        return __(\"Autofill lead information by entering their GSTIN\");\n    }\n\n    return __(\"Autofill is not supported in sandbox mode\");\n}\n", "frappe.provide('frappe.ui.form');\n\nclass GSTQuickEntryForm extends frappe.ui.form.QuickEntryForm {\n    constructor(...args) {\n        super(...args);\n        this.skip_redirect_on_error = true;\n        this.api_enabled =\n            india_compliance.is_api_enabled() && gst_settings.autofill_party_info;\n    }\n\n    async setup() {\n        await frappe.model.with_doctype(\"Address\");\n        super.setup();\n    }\n\n    render_dialog() {\n        super.render_dialog();\n        india_compliance.set_state_options(this.dialog);\n    }\n\n    get_address_fields() {\n        return [\n            {\n                label: __(\"Primary Address Details\"),\n                fieldname: \"primary_address_section\",\n                fieldtype: \"Section Break\",\n                description: this.api_enabled\n                    ? __(\n                          `When you enter a GSTIN, the permanent address linked to it is\n                        autofilled.<br>\n                        Change the {0} to autofill other addresses.`,\n                          [frappe.meta.get_label(\"Address\", \"pincode\")]\n                      )\n                    : \"\",\n                collapsible: 0,\n            },\n            {\n                // set as _pincode so that frappe.ui.form.Layout doesn't override it\n                fieldname: \"_pincode\",\n                fieldtype: \"Autocomplete\",\n                ignore_validation: true,\n            },\n            {\n                fieldname: \"address_line1\",\n                fieldtype: \"Data\",\n            },\n            {\n                fieldname: \"address_line2\",\n                fieldtype: \"Data\",\n            },\n            {\n                fieldtype: \"Column Break\",\n            },\n            {\n                fieldname: \"city\",\n                fieldtype: \"Data\",\n            },\n            {\n                fieldname: \"state\",\n                fieldtype: \"Autocomplete\",\n                ignore_validation: true,\n            },\n            {\n                fieldname: \"country\",\n                fieldtype: \"Link\",\n                options: \"Country\",\n                default: frappe.defaults.get_user_default(\"country\"),\n                onchange: () => {\n                    india_compliance.set_state_options(this.dialog);\n                },\n            },\n        ];\n    }\n\n    get_gstin_field() {\n        return [\n            {\n                ...frappe.meta.get_docfield(this.doctype, \"gstin\"),\n                fieldname: \"_gstin\",\n                fieldtype: \"Autocomplete\",\n                description: this.api_enabled ? get_gstin_description() : \"\",\n                ignore_validation: true,\n                onchange: () => {\n                    const d = this.dialog;\n                    if (this.api_enabled && !gst_settings.sandbox_mode)\n                        return autofill_fields(d);\n\n                    d.set_value(\n                        \"gst_category\",\n                        india_compliance.guess_gst_category(d.doc._gstin, d.doc.country)\n                    );\n                },\n            },\n        ];\n    }\n\n    update_doc() {\n        const doc = super.update_doc();\n        doc.pincode = doc._pincode;\n        doc.gstin = doc._gstin;\n        return doc;\n    }\n}\n\nclass SecondaryCustomerQuickEntryForm extends GSTQuickEntryForm {\n    get_address_fields() {\n        const fields = super.get_address_fields();\n\n        for (const field of fields) {\n            const fieldname =\n                field.fieldname === \"_pincode\" ? \"pincode\" : field.fieldname;\n\n            if (!field.label && fieldname) {\n                field.label = frappe.meta.get_label(\"Address\", fieldname);\n            }\n        }\n\n        return fields;\n    }\n\n    get_mandatory_fields(){\n        var fields = [{\n            label: __(\"First Name\"),\n            fieldname: \"first_name\",\n            fieldtype: \"Data\",\n            reqd: 1,\n        },\n        {\n            label: __(\"Organisation Name\"),\n            fieldname: \"company_name\",\n            fieldtype: \"Data\",\n            reqd: 1,\n        },\n        {\n            label: __(\"Source\"),\n            fieldname: \"source\",\n            fieldtype: \"Link\",\n            option: \"Lead Source\",\n        }\n    ]\n    return fields;\n    }\n\n    render_dialog() {\n        this.mandatory = [\n            ...this.get_gstin_field(),\n            ...this.mandatory = this.get_mandatory_fields(),\n            ...this.get_contact_fields(),\n            ...this.get_address_fields(),\n        ];\n\n        super.render_dialog();\n    }\n\n    get_contact_fields() {\n        return [\n            {\n                label: __(\"Primary Contact Details\"),\n                fieldname: \"primary_contact_section\",\n                fieldtype: \"Section Break\",\n                collapsible: 0,\n            },\n            {\n                label: __(\"Email ID\"),\n                fieldname: \"_email_id\",\n                fieldtype: \"Data\",\n                options: \"Email\",\n            },\n            {\n                fieldtype: \"Column Break\",\n            },\n            {\n                label: __(\"Mobile Number\"),\n                fieldname: \"_mobile_no\",\n                fieldtype: \"Data\",\n            },\n        ];\n    }\n\n    update_doc() {\n        const doc = super.update_doc();\n        // to prevent clash with ERPNext\n        doc._address_line1 = doc.address_line1;\n        // these fields were suffixed with _ to prevent them from being read only\n        doc.email_id = doc._email_id;\n        doc.mobile_no = doc._mobile_no;\n\n        return doc;\n    }\n}\n\n\nfrappe.ui.form.SecondaryCustomerQuickEntryForm = SecondaryCustomerQuickEntryForm\n\n\nasync function autofill_fields(dialog) {\n    const gstin = dialog.doc._gstin;\n    const gstin_field = dialog.get_field(\"_gstin\");\n\n    if (!gstin || gstin.length !== 15) {\n        const pincode_field = dialog.fields_dict._pincode;\n        pincode_field.set_data([]);\n        pincode_field.df.onchange = null;\n\n        gstin_field.set_description(get_gstin_description());\n        return;\n    }\n\n    const gstin_info = await get_gstin_info(gstin);\n    set_gstin_description(gstin_field, gstin_info.status);\n    map_gstin_info(dialog.doc, gstin_info);\n\n    dialog.set_value('first_name', gstin_info.business_name)\n    dialog.set_value('company_name', gstin_info.business_name)\n    dialog.refresh();\n\n    setup_pincode_field(dialog, gstin_info);\n}\n\nfunction set_gstin_description(gstin_field, status) {\n    if (!status) {\n        gstin_field.set_description(\"\");\n        return;\n    }\n\n    gstin_field.set_description(india_compliance.get_gstin_status_desc(status));\n}\n\nfunction setup_pincode_field(dialog, gstin_info) {\n    if (!gstin_info.all_addresses) return;\n\n    const pincode_field = dialog.fields_dict._pincode;\n    pincode_field.set_data(\n        gstin_info.all_addresses.map(address => {\n            return {\n                label: address.pincode,\n                value: address.pincode,\n                description: `${address.address_line1}, ${address.address_line2}, ${address.city}, ${address.state}`,\n            };\n        })\n    );\n    pincode_field.df.onchange = () => {\n        autofill_address(dialog.doc, gstin_info);\n        dialog.refresh();\n    };\n}\n\nfunction get_gstin_info(gstin, throw_error = true) {\n    return frappe\n        .call({\n            method: \"india_compliance.gst_india.utils.gstin_info.get_gstin_info\",\n            args: { gstin, throw_error }\n        })\n        .then(r => r.message);\n}\n\nfunction map_gstin_info(doc, gstin_info) {\n    if (!gstin_info) return;\n\n    update_secondary_customer_info(doc, gstin_info);\n\n    if (gstin_info.permanent_address) {\n        update_address_info(doc, gstin_info.permanent_address);\n    }\n}\n\nfunction update_secondary_customer_info(doc, gstin_info) {\n    doc.gstin = doc._custom_gstin;\n    doc.gst_category = gstin_info.gst_category;\n\n    if (!in_list(frappe.boot.gst_party_types, doc.doctype)) return;\n\n    const secondary_customer_name_field = `${doc.doctype.toLowerCase()}_name`;\n    doc[secondary_customer_name_field] = gstin_info.business_name;\n}\n\nfunction update_address_info(doc, address) {\n    if (!address) return;\n\n    Object.assign(doc, address);\n    // set field renamed due conflict with frappe.ui.form.Layout\n    doc._pincode = address.pincode;\n}\n\nfunction autofill_address(doc, { all_addresses }) {\n    const { _pincode: pincode } = doc;\n    if (!pincode || pincode.length !== 6 || !all_addresses) return;\n\n    update_address_info(\n        doc,\n        all_addresses.find(address => address.pincode == pincode)\n    );\n}\n\nfunction get_gstin_description() {\n    if (!gst_settings.sandbox_mode) {\n        return __(\"Autofill secondary_customer information by entering their GSTIN\");\n    }\n\n    return __(\"Autofill is not supported in sandbox mode\");\n}\n\n\n\nfrappe.ui.form.on(\"Secondary Customer\", {\n    gstin:function(frm) {\n\n        const gstin = frm.doc.gstin\n        const gstin_field = frm.get_field(\"gstin\")\n\n        frappe.call({\n            method: \"india_compliance.gst_india.doctype.gstin.gstin.get_gstin_status\",\n            args: {gstin},\n            callback:(r) => {\n                const  status = r.message.status\n                gstin_field.set_description(india_compliance.get_gstin_status_desc(status));\n            }\n        })\n    },\n    onload_post_render(frm) {\n        \n        if(!frm.doc.address_display && !frm.is_new()){\n            frappe.call({\n                method: \"snrg.doc_events.get_address\",\n                args: {\n                    \"docname\":frm.doc.name\n                },\n                callback: function(r) {\n                    if(r.message){\n                        frm.set_value(\"address_display\",r.message)\n                    }\n                }\n            })\n        }\n\n        if(!frm.doc.contact_display && !frm.is_new()){\n            frappe.call({\n                method: \"snrg.doc_events.get_contact\",\n                args: {\n                    \"docname\": frm.doc.name\n                },\n                callback: function(r) {\n                    if(r.message) {\n                        frm.set_value(\"contact_display\", r.message)\n                    }\n                },\n            })\n        }\n    },\n})", "\nfrappe.ui.form.on(\"Lead\", {\n    custom_gstin:function(frm) {\n\n        const gstin = frm.doc.custom_gstin\n        const gstin_field = frm.get_field(\"custom_gstin\")\n\n        frappe.call({\n            method: \"india_compliance.gst_india.doctype.gstin.gstin.get_gstin_status\",\n            args: {gstin},\n            callback:(r) => {\n                const  status = r.message.status\n                gstin_field.set_description(india_compliance.get_gstin_status_desc(status));\n            }\n        })\n    },\n    onload_post_render(frm) {\n        frm.remove_custom_button(__(\"Customer\"), \"Create\");\n    },\n    refresh(frm) {\n        if(!frm.is_new()) {\n            frm.add_custom_button(__(\"Secondary Customer\"), make_secondary_customer, __(\"Create\"))\n            frm.add_custom_button(__(\"Create Customer\"), make_customer, __(\"Create\"));\n        }\n        function make_secondary_customer() {\n            frappe.model.open_mapped_doc({\n                method: \"snrg.doc_events.make_secondary_customer\",\n                frm: cur_frm,\n            })\n        }\n    },\n    \n})\n\nlet make_customer = function  () {\n    frappe.model.open_mapped_doc({\n        method: \"snrg.doc_events.make_customer\",\n        frm: cur_frm\n    })\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAAA,SAAO,QAAQ,gBAAgB;AAE/B,MAAM,oBAAN,cAAgC,OAAO,GAAG,KAAK,eAAe;AAAA,IAC1D,eAAe,MAAM;AACT,YAAM,GAAG,IAAI;AACb,WAAK,yBAAyB;AAC9B,WAAK,cACD,iBAAiB,eAAe,KAAK,aAAa;AAAA,IAC1D;AAAA,IAER,MAAM,QAAQ;AACV,YAAM,OAAO,MAAM,aAAa,SAAS;AACzC,YAAM,MAAM;AAAA,IAChB;AAAA,IAEA,gBAAgB;AACZ,YAAM,cAAc;AACpB,uBAAiB,kBAAkB,KAAK,MAAM;AAAA,IAClD;AAAA,IAEA,qBAAqB;AACjB,aAAO;AAAA,QACH;AAAA,UACI,OAAO,GAAG,yBAAyB;AAAA,UACnC,WAAW;AAAA,UACX,WAAW;AAAA,UACX,aAAa,KAAK,cACZ;AAAA,YACM;AAAA;AAAA;AAAA,YAGA,CAAC,OAAO,KAAK,UAAU,WAAW,SAAS,CAAC;AAAA,UAChD,IACF;AAAA,UACN,aAAa;AAAA,QACjB;AAAA,QACA;AAAA,UAEI,WAAW;AAAA,UACX,WAAW;AAAA,UACX,mBAAmB;AAAA,QACvB;AAAA,QACA;AAAA,UACI,WAAW;AAAA,UACX,WAAW;AAAA,QACf;AAAA,QACA;AAAA,UACI,WAAW;AAAA,UACX,WAAW;AAAA,QACf;AAAA,QACA;AAAA,UACI,WAAW;AAAA,QACf;AAAA,QACA;AAAA,UACI,WAAW;AAAA,UACX,WAAW;AAAA,QACf;AAAA,QACA;AAAA,UACI,WAAW;AAAA,UACX,WAAW;AAAA,UACX,mBAAmB;AAAA,QACvB;AAAA,QACA;AAAA,UACI,WAAW;AAAA,UACX,WAAW;AAAA,UACX,SAAS;AAAA,UACT,SAAS,OAAO,SAAS,iBAAiB,SAAS;AAAA,UACnD,UAAU,MAAM;AACZ,6BAAiB,kBAAkB,KAAK,MAAM;AAAA,UAClD;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,IAEA,kBAAkB;AACd,aAAO;AAAA,QACH,iCACO,OAAO,KAAK,aAAa,KAAK,SAAS,cAAc,IAD5D;AAAA,UAEI,OAAO;AAAA,UACP,WAAW;AAAA,UACX,WAAW;AAAA,UACX,aAAa,KAAK,cAAc,sBAAsB,IAAI;AAAA,UAC1D,mBAAmB;AAAA,UACnB,UAAU,MAAM;AACZ,kBAAM,IAAI,KAAK;AACf,gBAAI,KAAK,eAAe,CAAC,aAAa;AAClC,qBAAO,gBAAgB,CAAC;AAAA,UAChC;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,IAEA,aAAa;AACT,YAAM,MAAM,MAAM,WAAW;AAC7B,UAAI,UAAU,IAAI;AAClB,UAAI,eAAe,IAAI;AACvB,UAAI,gBAAgB,IAAI;AACxB,aAAO;AAAA,IACX;AAAA,EAEJ;AAEA,MAAM,qBAAN,cAAiC,kBAAiB;AAAA,IAC9C,qBAAqB;AACT,YAAM,SAAS,MAAM,mBAAmB;AAExC,iBAAW,SAAS,QAAQ;AACxB,cAAM,YACF,MAAM,cAAc,aAAa,YAAY,MAAM;AAEvD,YAAI,CAAC,MAAM,SAAS,WAAW;AAC3B,gBAAM,QAAQ,OAAO,KAAK,UAAU,WAAW,SAAS;AAAA,QAC5D;AAAA,MACJ;AAEA,aAAO;AAAA,IACX;AAAA,IACA,uBAAuB;AACnB,UAAI,SAAS;AAAA,QAAC;AAAA,UACV,OAAO,GAAG,YAAY;AAAA,UACtB,WAAW;AAAA,UACX,WAAW;AAAA,UACX,MAAM;AAAA,QACV;AAAA,QACA;AAAA,UACI,OAAO,GAAG,mBAAmB;AAAA,UAC7B,WAAW;AAAA,UACX,WAAW;AAAA,QACf;AAAA,QACA;AAAA,UACI,OAAO,GAAG,QAAQ;AAAA,UAClB,WAAW;AAAA,UACX,WAAW;AAAA,UACX,QAAQ;AAAA,QACZ;AAAA,MAEJ;AAEI,aAAO;AAAA,IACnB;AAAA,IAEQ,gBAAgB;AACZ,WAAK,YAAY;AAAA,QACb,GAAG,KAAK,gBAAgB;AAAA,QACxB,GAAG,KAAK,YAAY,KAAK,qBAAqB;AAAA,QAC9C,GAAG,KAAK,mBAAmB;AAAA,QAC3B,GAAG,KAAK,mBAAmB;AAAA,MAC/B;AAEA,YAAM,cAAc;AAAA,IACxB;AAAA,IAEA,qBAAqB;AACjB,aAAO;AAAA,QACH;AAAA,UACI,OAAO,GAAG,yBAAyB;AAAA,UACnC,WAAW;AAAA,UACX,WAAW;AAAA,UACX,aAAa;AAAA,QACjB;AAAA,QACA;AAAA,UACI,OAAO,GAAG,UAAU;AAAA,UACpB,WAAW;AAAA,UACX,WAAW;AAAA,UACX,SAAS;AAAA,QACb;AAAA,QACA;AAAA,UACI,WAAW;AAAA,QACf;AAAA,QACA;AAAA,UACI,OAAO,GAAG,eAAe;AAAA,UACzB,WAAW;AAAA,UACX,WAAW;AAAA,QACf;AAAA,MACJ;AAAA,IACJ;AAAA,IAEA,aAAa;AACT,YAAM,MAAM,MAAM,WAAW;AAE7B,UAAI,iBAAiB,IAAI;AAGzB,UAAI,WAAW,IAAI;AACnB,UAAI,YAAY,IAAI;AAEpB,aAAO;AAAA,IACX;AAAA,EAEZ;AAIA,SAAO,GAAG,KAAK,qBAAqB;AAGpC,iBAAe,gBAAgB,QAAQ;AACnC,UAAM,QAAQ,OAAO,IAAI;AACzB,UAAM,cAAc,OAAO,UAAU,eAAe;AAEpD,QAAI,CAAC,SAAS,MAAM,WAAW,IAAI;AAC/B,YAAM,gBAAgB,OAAO,YAAY;AACzC,oBAAc,SAAS,CAAC,CAAC;AACzB,oBAAc,GAAG,WAAW;AAE5B,kBAAY,gBAAgB,sBAAsB,CAAC;AACnD;AAAA,IACJ;AAEA,UAAM,aAAa,MAAM,eAAe,KAAK;AAC7C,0BAAsB,aAAa,WAAW,MAAM;AACpD,mBAAe,OAAO,KAAK,UAAU;AACrC,WAAO,UAAU,gBAAgB,WAAW,aAAa;AACzD,WAAO,QAAQ;AAEf,wBAAoB,QAAQ,UAAU;AAAA,EAC1C;AAEA,WAAS,sBAAsB,aAAa,QAAQ;AAChD,QAAI,CAAC,QAAQ;AACT,kBAAY,gBAAgB,EAAE;AAC9B;AAAA,IACJ;AAEA,gBAAY,gBAAgB,iBAAiB,sBAAsB,MAAM,CAAC;AAAA,EAC9E;AAEA,WAAS,oBAAoB,QAAQ,YAAY;AAC7C,QAAI,CAAC,WAAW;AAAe;AAE/B,UAAM,gBAAgB,OAAO,YAAY;AACzC,kBAAc;AAAA,MACV,WAAW,cAAc,IAAI,aAAW;AACpC,eAAO;AAAA,UACH,OAAO,QAAQ;AAAA,UACf,OAAO,QAAQ;AAAA,UACf,aAAa,GAAG,QAAQ,kBAAkB,QAAQ,kBAAkB,QAAQ,SAAS,QAAQ;AAAA,QACjG;AAAA,MACJ,CAAC;AAAA,IACL;AACA,kBAAc,GAAG,WAAW,MAAM;AAC9B,uBAAiB,OAAO,KAAK,UAAU;AACvC,aAAO,QAAQ;AAAA,IACnB;AAAA,EACJ;AAEA,WAAS,eAAe,OAAO,cAAc,MAAM;AAC/C,WAAO,OACF,KAAK;AAAA,MACF,QAAQ;AAAA,MACR,MAAM,EAAE,OAAO,YAAY;AAAA,IAC/B,CAAC,EACA,KAAK,OAAK,EAAE,OAAO;AAAA,EAC5B;AAEA,WAAS,eAAe,KAAK,YAAY;AACrC,QAAI,CAAC;AAAY;AAEjB,qBAAiB,KAAK,UAAU;AAEhC,QAAI,WAAW,mBAAmB;AAC9B,0BAAoB,KAAK,WAAW,iBAAiB;AAAA,IACzD;AAAA,EACJ;AAEA,WAAS,iBAAiB,KAAK,YAAY;AACvC,QAAI,QAAQ,IAAI;AAChB,QAAI,eAAe,WAAW;AAE9B,QAAI,CAAC,QAAQ,OAAO,KAAK,iBAAiB,IAAI,OAAO;AAAG;AAExD,UAAM,kBAAkB,GAAG,IAAI,QAAQ,YAAY;AACnD,QAAI,mBAAmB,WAAW;AAAA,EACtC;AAEA,WAAS,oBAAoB,KAAK,SAAS;AACvC,QAAI,CAAC;AAAS;AAEd,WAAO,OAAO,KAAK,OAAO;AAE1B,QAAI,WAAW,QAAQ;AAAA,EAC3B;AAEA,WAAS,iBAAiB,KAAK,EAAE,cAAc,GAAG;AAC9C,UAAM,EAAE,UAAU,QAAQ,IAAI;AAC9B,QAAI,CAAC,WAAW,QAAQ,WAAW,KAAK,CAAC;AAAe;AAExD;AAAA,MACI;AAAA,MACA,cAAc,KAAK,aAAW,QAAQ,WAAW,OAAO;AAAA,IAC5D;AAAA,EACJ;AAEA,WAAS,wBAAwB;AAC7B,QAAI,CAAC,aAAa,cAAc;AAC5B,aAAO,GAAG,mDAAmD;AAAA,IACjE;AAEA,WAAO,GAAG,2CAA2C;AAAA,EACzD;;;AC3SA,SAAO,QAAQ,gBAAgB;AAE/B,MAAMA,qBAAN,cAAgC,OAAO,GAAG,KAAK,eAAe;AAAA,IAC1D,eAAe,MAAM;AACjB,YAAM,GAAG,IAAI;AACb,WAAK,yBAAyB;AAC9B,WAAK,cACD,iBAAiB,eAAe,KAAK,aAAa;AAAA,IAC1D;AAAA,IAEA,MAAM,QAAQ;AACV,YAAM,OAAO,MAAM,aAAa,SAAS;AACzC,YAAM,MAAM;AAAA,IAChB;AAAA,IAEA,gBAAgB;AACZ,YAAM,cAAc;AACpB,uBAAiB,kBAAkB,KAAK,MAAM;AAAA,IAClD;AAAA,IAEA,qBAAqB;AACjB,aAAO;AAAA,QACH;AAAA,UACI,OAAO,GAAG,yBAAyB;AAAA,UACnC,WAAW;AAAA,UACX,WAAW;AAAA,UACX,aAAa,KAAK,cACZ;AAAA,YACI;AAAA;AAAA;AAAA,YAGA,CAAC,OAAO,KAAK,UAAU,WAAW,SAAS,CAAC;AAAA,UAChD,IACA;AAAA,UACN,aAAa;AAAA,QACjB;AAAA,QACA;AAAA,UAEI,WAAW;AAAA,UACX,WAAW;AAAA,UACX,mBAAmB;AAAA,QACvB;AAAA,QACA;AAAA,UACI,WAAW;AAAA,UACX,WAAW;AAAA,QACf;AAAA,QACA;AAAA,UACI,WAAW;AAAA,UACX,WAAW;AAAA,QACf;AAAA,QACA;AAAA,UACI,WAAW;AAAA,QACf;AAAA,QACA;AAAA,UACI,WAAW;AAAA,UACX,WAAW;AAAA,QACf;AAAA,QACA;AAAA,UACI,WAAW;AAAA,UACX,WAAW;AAAA,UACX,mBAAmB;AAAA,QACvB;AAAA,QACA;AAAA,UACI,WAAW;AAAA,UACX,WAAW;AAAA,UACX,SAAS;AAAA,UACT,SAAS,OAAO,SAAS,iBAAiB,SAAS;AAAA,UACnD,UAAU,MAAM;AACZ,6BAAiB,kBAAkB,KAAK,MAAM;AAAA,UAClD;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,IAEA,kBAAkB;AACd,aAAO;AAAA,QACH,iCACO,OAAO,KAAK,aAAa,KAAK,SAAS,OAAO,IADrD;AAAA,UAEI,WAAW;AAAA,UACX,WAAW;AAAA,UACX,aAAa,KAAK,cAAcC,uBAAsB,IAAI;AAAA,UAC1D,mBAAmB;AAAA,UACnB,UAAU,MAAM;AACZ,kBAAM,IAAI,KAAK;AACf,gBAAI,KAAK,eAAe,CAAC,aAAa;AAClC,qBAAOC,iBAAgB,CAAC;AAE5B,cAAE;AAAA,cACE;AAAA,cACA,iBAAiB,mBAAmB,EAAE,IAAI,QAAQ,EAAE,IAAI,OAAO;AAAA,YACnE;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,IAEA,aAAa;AACT,YAAM,MAAM,MAAM,WAAW;AAC7B,UAAI,UAAU,IAAI;AAClB,UAAI,QAAQ,IAAI;AAChB,aAAO;AAAA,IACX;AAAA,EACJ;AAEA,MAAM,kCAAN,cAA8CF,mBAAkB;AAAA,IAC5D,qBAAqB;AACjB,YAAM,SAAS,MAAM,mBAAmB;AAExC,iBAAW,SAAS,QAAQ;AACxB,cAAM,YACF,MAAM,cAAc,aAAa,YAAY,MAAM;AAEvD,YAAI,CAAC,MAAM,SAAS,WAAW;AAC3B,gBAAM,QAAQ,OAAO,KAAK,UAAU,WAAW,SAAS;AAAA,QAC5D;AAAA,MACJ;AAEA,aAAO;AAAA,IACX;AAAA,IAEA,uBAAsB;AAClB,UAAI,SAAS;AAAA,QAAC;AAAA,UACV,OAAO,GAAG,YAAY;AAAA,UACtB,WAAW;AAAA,UACX,WAAW;AAAA,UACX,MAAM;AAAA,QACV;AAAA,QACA;AAAA,UACI,OAAO,GAAG,mBAAmB;AAAA,UAC7B,WAAW;AAAA,UACX,WAAW;AAAA,UACX,MAAM;AAAA,QACV;AAAA,QACA;AAAA,UACI,OAAO,GAAG,QAAQ;AAAA,UAClB,WAAW;AAAA,UACX,WAAW;AAAA,UACX,QAAQ;AAAA,QACZ;AAAA,MACJ;AACA,aAAO;AAAA,IACP;AAAA,IAEA,gBAAgB;AACZ,WAAK,YAAY;AAAA,QACb,GAAG,KAAK,gBAAgB;AAAA,QACxB,GAAG,KAAK,YAAY,KAAK,qBAAqB;AAAA,QAC9C,GAAG,KAAK,mBAAmB;AAAA,QAC3B,GAAG,KAAK,mBAAmB;AAAA,MAC/B;AAEA,YAAM,cAAc;AAAA,IACxB;AAAA,IAEA,qBAAqB;AACjB,aAAO;AAAA,QACH;AAAA,UACI,OAAO,GAAG,yBAAyB;AAAA,UACnC,WAAW;AAAA,UACX,WAAW;AAAA,UACX,aAAa;AAAA,QACjB;AAAA,QACA;AAAA,UACI,OAAO,GAAG,UAAU;AAAA,UACpB,WAAW;AAAA,UACX,WAAW;AAAA,UACX,SAAS;AAAA,QACb;AAAA,QACA;AAAA,UACI,WAAW;AAAA,QACf;AAAA,QACA;AAAA,UACI,OAAO,GAAG,eAAe;AAAA,UACzB,WAAW;AAAA,UACX,WAAW;AAAA,QACf;AAAA,MACJ;AAAA,IACJ;AAAA,IAEA,aAAa;AACT,YAAM,MAAM,MAAM,WAAW;AAE7B,UAAI,iBAAiB,IAAI;AAEzB,UAAI,WAAW,IAAI;AACnB,UAAI,YAAY,IAAI;AAEpB,aAAO;AAAA,IACX;AAAA,EACJ;AAGA,SAAO,GAAG,KAAK,kCAAkC;AAGjD,iBAAeE,iBAAgB,QAAQ;AACnC,UAAM,QAAQ,OAAO,IAAI;AACzB,UAAM,cAAc,OAAO,UAAU,QAAQ;AAE7C,QAAI,CAAC,SAAS,MAAM,WAAW,IAAI;AAC/B,YAAM,gBAAgB,OAAO,YAAY;AACzC,oBAAc,SAAS,CAAC,CAAC;AACzB,oBAAc,GAAG,WAAW;AAE5B,kBAAY,gBAAgBD,uBAAsB,CAAC;AACnD;AAAA,IACJ;AAEA,UAAM,aAAa,MAAME,gBAAe,KAAK;AAC7C,IAAAC,uBAAsB,aAAa,WAAW,MAAM;AACpD,IAAAC,gBAAe,OAAO,KAAK,UAAU;AAErC,WAAO,UAAU,cAAc,WAAW,aAAa;AACvD,WAAO,UAAU,gBAAgB,WAAW,aAAa;AACzD,WAAO,QAAQ;AAEf,IAAAC,qBAAoB,QAAQ,UAAU;AAAA,EAC1C;AAEA,WAASF,uBAAsB,aAAa,QAAQ;AAChD,QAAI,CAAC,QAAQ;AACT,kBAAY,gBAAgB,EAAE;AAC9B;AAAA,IACJ;AAEA,gBAAY,gBAAgB,iBAAiB,sBAAsB,MAAM,CAAC;AAAA,EAC9E;AAEA,WAASE,qBAAoB,QAAQ,YAAY;AAC7C,QAAI,CAAC,WAAW;AAAe;AAE/B,UAAM,gBAAgB,OAAO,YAAY;AACzC,kBAAc;AAAA,MACV,WAAW,cAAc,IAAI,aAAW;AACpC,eAAO;AAAA,UACH,OAAO,QAAQ;AAAA,UACf,OAAO,QAAQ;AAAA,UACf,aAAa,GAAG,QAAQ,kBAAkB,QAAQ,kBAAkB,QAAQ,SAAS,QAAQ;AAAA,QACjG;AAAA,MACJ,CAAC;AAAA,IACL;AACA,kBAAc,GAAG,WAAW,MAAM;AAC9B,MAAAC,kBAAiB,OAAO,KAAK,UAAU;AACvC,aAAO,QAAQ;AAAA,IACnB;AAAA,EACJ;AAEA,WAASJ,gBAAe,OAAO,cAAc,MAAM;AAC/C,WAAO,OACF,KAAK;AAAA,MACF,QAAQ;AAAA,MACR,MAAM,EAAE,OAAO,YAAY;AAAA,IAC/B,CAAC,EACA,KAAK,OAAK,EAAE,OAAO;AAAA,EAC5B;AAEA,WAASE,gBAAe,KAAK,YAAY;AACrC,QAAI,CAAC;AAAY;AAEjB,mCAA+B,KAAK,UAAU;AAE9C,QAAI,WAAW,mBAAmB;AAC9B,MAAAG,qBAAoB,KAAK,WAAW,iBAAiB;AAAA,IACzD;AAAA,EACJ;AAEA,WAAS,+BAA+B,KAAK,YAAY;AACrD,QAAI,QAAQ,IAAI;AAChB,QAAI,eAAe,WAAW;AAE9B,QAAI,CAAC,QAAQ,OAAO,KAAK,iBAAiB,IAAI,OAAO;AAAG;AAExD,UAAM,gCAAgC,GAAG,IAAI,QAAQ,YAAY;AACjE,QAAI,iCAAiC,WAAW;AAAA,EACpD;AAEA,WAASA,qBAAoB,KAAK,SAAS;AACvC,QAAI,CAAC;AAAS;AAEd,WAAO,OAAO,KAAK,OAAO;AAE1B,QAAI,WAAW,QAAQ;AAAA,EAC3B;AAEA,WAASD,kBAAiB,KAAK,EAAE,cAAc,GAAG;AAC9C,UAAM,EAAE,UAAU,QAAQ,IAAI;AAC9B,QAAI,CAAC,WAAW,QAAQ,WAAW,KAAK,CAAC;AAAe;AAExD,IAAAC;AAAA,MACI;AAAA,MACA,cAAc,KAAK,aAAW,QAAQ,WAAW,OAAO;AAAA,IAC5D;AAAA,EACJ;AAEA,WAASP,yBAAwB;AAC7B,QAAI,CAAC,aAAa,cAAc;AAC5B,aAAO,GAAG,iEAAiE;AAAA,IAC/E;AAEA,WAAO,GAAG,2CAA2C;AAAA,EACzD;AAIA,SAAO,GAAG,KAAK,GAAG,sBAAsB;AAAA,IACpC,OAAM,SAAS,KAAK;AAEhB,YAAM,QAAQ,IAAI,IAAI;AACtB,YAAM,cAAc,IAAI,UAAU,OAAO;AAEzC,aAAO,KAAK;AAAA,QACR,QAAQ;AAAA,QACR,MAAM,EAAC,MAAK;AAAA,QACZ,UAAS,CAAC,MAAM;AACZ,gBAAO,SAAS,EAAE,QAAQ;AAC1B,sBAAY,gBAAgB,iBAAiB,sBAAsB,MAAM,CAAC;AAAA,QAC9E;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,IACA,mBAAmB,KAAK;AAEpB,UAAG,CAAC,IAAI,IAAI,mBAAmB,CAAC,IAAI,OAAO,GAAE;AACzC,eAAO,KAAK;AAAA,UACR,QAAQ;AAAA,UACR,MAAM;AAAA,YACF,WAAU,IAAI,IAAI;AAAA,UACtB;AAAA,UACA,UAAU,SAAS,GAAG;AAClB,gBAAG,EAAE,SAAQ;AACT,kBAAI,UAAU,mBAAkB,EAAE,OAAO;AAAA,YAC7C;AAAA,UACJ;AAAA,QACJ,CAAC;AAAA,MACL;AAEA,UAAG,CAAC,IAAI,IAAI,mBAAmB,CAAC,IAAI,OAAO,GAAE;AACzC,eAAO,KAAK;AAAA,UACR,QAAQ;AAAA,UACR,MAAM;AAAA,YACF,WAAW,IAAI,IAAI;AAAA,UACvB;AAAA,UACA,UAAU,SAAS,GAAG;AAClB,gBAAG,EAAE,SAAS;AACV,kBAAI,UAAU,mBAAmB,EAAE,OAAO;AAAA,YAC9C;AAAA,UACJ;AAAA,QACJ,CAAC;AAAA,MACL;AAAA,IACJ;AAAA,EACJ,CAAC;;;AC5VD,SAAO,GAAG,KAAK,GAAG,QAAQ;AAAA,IACtB,cAAa,SAAS,KAAK;AAEvB,YAAM,QAAQ,IAAI,IAAI;AACtB,YAAM,cAAc,IAAI,UAAU,cAAc;AAEhD,aAAO,KAAK;AAAA,QACR,QAAQ;AAAA,QACR,MAAM,EAAC,MAAK;AAAA,QACZ,UAAS,CAAC,MAAM;AACZ,gBAAO,SAAS,EAAE,QAAQ;AAC1B,sBAAY,gBAAgB,iBAAiB,sBAAsB,MAAM,CAAC;AAAA,QAC9E;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,IACA,mBAAmB,KAAK;AACpB,UAAI,qBAAqB,GAAG,UAAU,GAAG,QAAQ;AAAA,IACrD;AAAA,IACA,QAAQ,KAAK;AACT,UAAG,CAAC,IAAI,OAAO,GAAG;AACd,YAAI,kBAAkB,GAAG,oBAAoB,GAAG,yBAAyB,GAAG,QAAQ,CAAC;AACrF,YAAI,kBAAkB,GAAG,iBAAiB,GAAG,eAAe,GAAG,QAAQ,CAAC;AAAA,MAC5E;AACA,eAAS,0BAA0B;AAC/B,eAAO,MAAM,gBAAgB;AAAA,UACzB,QAAQ;AAAA,UACR,KAAK;AAAA,QACT,CAAC;AAAA,MACL;AAAA,IACJ;AAAA,EAEJ,CAAC;AAED,MAAI,gBAAgB,WAAa;AAC7B,WAAO,MAAM,gBAAgB;AAAA,MACzB,QAAQ;AAAA,MACR,KAAK;AAAA,IACT,CAAC;AAAA,EACL;",
  "names": ["GSTQuickEntryForm", "get_gstin_description", "autofill_fields", "get_gstin_info", "set_gstin_description", "map_gstin_info", "setup_pincode_field", "autofill_address", "update_address_info"]
}
